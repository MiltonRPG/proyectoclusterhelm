# Configuraciones básicas del chart

replicaCount: 2

image:
  repository: miltonrpg/mi-app-nodejs
  pullPolicy: IfNotPresent
  tag: "latest"

# Configuración de los secretos
secrets:
  dbUser: "kubernetes"  # No es sensible, pero evitar aquí valores sensibles como contraseñas
  dbPassword: "kubernetes"  # No almacenar aquí la contraseña sensible, sino en el Secret de Kubernetes
  dbName: "proyecto_kubernetes"
  dbHost: "mysql"

ingress:
  enabled: false  # Cambia a true si deseas habilitar Ingress
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

# Configuración del servicio
service:
  type: ClusterIP
  port: 80

persistence:
  enabled: true
  accessModes: ReadWriteOnce
  size: 1Gi

volumeMounts:
  - name: mysql-persistent-storage
    mountPath: /var/lib/mysql

volumes:
  - name: mysql-persistent-storage
    persistentVolumeClaim:
      claimName: mysql-pvc

livenessProbe:
  httpGet:
    path: /
    port: 3000

readinessProbe:
  httpGet:
    path: /

# Configuración del autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70 # Escala cuando el uso de CPU supere el 70%

# Configuración de recursos para habilitar el autoscaling
resources:
  requests:
    cpu: 100m  # 100 milicores es una buena configuración inicial para solicitudes mínimas
    memory: 128Mi
  limits:
    cpu: 200m  # Limite de CPU, para controlar el máximo uso de recursos
    memory: 256Mi

nodeSelector: {}
tolerations: []
affinity: {}

serviceAccount:
  create: true  # Cambia a false si no quieres crear una ServiceAccount
  name: ""      # Deja esto vacío si deseas que Helm genere el nombre


